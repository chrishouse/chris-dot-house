<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chris.house</title>
    <description>Chris House is a web designer and front-end developer from Kansas City.
</description>
    <link>http://chris.house/</link>
    <atom:link href="http://chris.house/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Apr 2016 19:58:49 -0500</pubDate>
    <lastBuildDate>Wed, 13 Apr 2016 19:58:49 -0500</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Building a Home Page with Grid</title>
        <description>&lt;p&gt;When I begin a project and start planning how to lay out the home page, my brain jumps to floats and positioning. Some of you might go with Bootstrap or another framework. This is because it’s the year 2016 and that’s still how we do things. But I’d like to do some mental time traveling. Let’s pretend it’s the year 2018 and the CSS Grid Layout module is supported by all major browsers. Our page layout paradigm has shifted completely, and CSS capabilities are finally in harmony with our design goals. It’s a great time to be a web developer. Let’s create a home page using our awesome new tool.&lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;h3&gt;The Design&lt;/h3&gt;

&lt;p&gt;Here’s the page we’ll be creating:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-complete.jpg&quot; alt=&quot;Complete Design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we actually start coding we need to get into the grid mindset. The first step is to look at our design and divide it into major grid components. Here’s how I’ve chosen to do it for this design:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-highlight.jpg&quot; alt=&quot;Complete Design Highlighted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see we’re working with seven top-level grid areas. I say “top-level” because we’re able to nest grids, which is exactly what we’ll be doing with the &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-hero-highlight.jpg&quot; alt=&quot;Hero Highlighted&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;The HTML&lt;/h3&gt;

&lt;p&gt;Here’s the basic structure of the HTML. I’ll show the entire completed file later, but for now I’ve left out most of the minutia. The important parts to take note of here are the seven elements that are direct descendants of &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;top-bar&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;main-header&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;blog-posts&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;news&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;side-bar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main-footer&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; is going to be our grid container and its children will be the grid items.&lt;/p&gt;

&lt;p&gt;As I mentioned, we’ll also be setting &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; as a grid container. It has two children which will be grid items: &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;award&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top-bar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- social links and contact info --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- logo and main navigation --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hero&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- circular element --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;award&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- award image and quote --&amp;gt;&lt;/span&gt;			
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog-posts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- blog posts and excerpts --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;news&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- news headlines and excerpts --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;side-bar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- critter of the month info --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- footer menu and copyright --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;The CSS&lt;/h3&gt;

&lt;p&gt;Alright, let’s do this. As we go along I’m not going to show all the CSS used to style our elements. At the end I’ll show the entire completed file, but for now we’ll only focus on the juicy grid stuff and any styling directly related to it.&lt;/p&gt;

&lt;p&gt;Let’s start by defining the main grid on &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;950px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve just created a grid that’s four columns wide by six rows high. The first and last columns will act as padding on either side of the main content. I set the third column to 400px because that’s where we’ll be placing the &lt;code class=&quot;highlighter-rouge&quot;&gt;side-bar&lt;/code&gt; element, and we want that to be a fixed width. The &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; element (the third row) will have a fixed height of 950px.&lt;/p&gt;

&lt;p&gt;Now let’s define which grid area will go where using &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt;. This is the really fun part:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;950px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;top-bar     top-bar     top-bar     top-bar&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;main-header main-header main-header main-header&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;hero        hero        hero        hero&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;.           blog-posts  side-bar    .&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;.           news        side-bar    .&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;main-footer main-footer main-footer main-footer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; lets us place our elements wherever we want, and it gives us a nice visualization of how it’ll all look. Remember that the values used here (“top-bar”, “main-header”, “hero”, etc.) aren’t referring to the class names of those elements, but rather to the names we give them with the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; property, which we’ll do in a moment.&lt;/p&gt;

&lt;p&gt;When a grid area name is repeated, that element will span across those columns/rows. For instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;top-bar&lt;/code&gt; spans across all four columns, and &lt;code class=&quot;highlighter-rouge&quot;&gt;side-bar&lt;/code&gt; spans down rows four and five. The periods represent empty cells. If you refer to the complete design back at the top, you’ll see how this definition matches our grid pattern.&lt;/p&gt;

&lt;p&gt;Assuming we’ve applied all of our styling but haven’t yet assigned grid area names to our grid items, right now our page is looking pretty funky:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-broken.jpg&quot; alt=&quot;Grid Page Broken&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Until we assign grid area names to the grid items, the grid is going to automatically place our elements in the grid based on their source order. Obviously this isn’t what we want. In order for our layout to work as expected we need to define our grid areas. So let’s go ahead and do that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.top-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
&lt;span class=&quot;nc&quot;&gt;.main-header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main-header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
&lt;span class=&quot;nc&quot;&gt;.hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.blog-posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog-posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.side-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.main-footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main-footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember that these names can be anything you want. I chose to have them match the class names purely for convenience.&lt;/p&gt;

&lt;p&gt;Now that we’ve assigned grid area names to our grid items, they’ll fall into place on our grid. This single step makes a world of difference:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-fixed.jpg&quot; alt=&quot;Grid Page Fixed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the exception of the items in the &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; section, everything is laying out exactly like it should. We’re almost finished.&lt;/p&gt;

&lt;p&gt;But before we fix the &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; section, I want to explain something that might not be totally clear: the padding on either side of the main content. As a reminder, we sized our columns like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The two columns set to 12% are used for padding around the main content, &lt;em&gt;but they’re only utilized for the fourth and fifth rows&lt;/em&gt;. As you recall, we told our &lt;code class=&quot;highlighter-rouge&quot;&gt;top-bar&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;main-header&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main-footer&lt;/code&gt; elements to span across all the columns, including these two “padding” columns. Why did we do this? Because we want the backgrounds of these elements to span 100% of the viewport width with no white space on either side. We only want white space around the &lt;code class=&quot;highlighter-rouge&quot;&gt;blog-post&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;news&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sidebar&lt;/code&gt; elements (rows four and five).&lt;/p&gt;

&lt;p&gt;In order to stretch our elements across the full width of the grid while still maintaining padding on either side of the content, we need to explicitly set padding on those elements:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.top-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.main-header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.main-footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We chose 12% for the horizontal padding because it exactly matches the width of the first and last columns in our &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; definition. Now the elements that need to fill the full width will do so, and all the content has 12% of space on either side of it. Beautiful.&lt;/p&gt;

&lt;p&gt;Okay, let’s fix the &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt; section. It’ll be a grid container, so we define it as a grid just like we’ve done before:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a 3 x 3 grid with everything set to &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; except for the middle column. We give the middle column a size of &lt;code class=&quot;highlighter-rouge&quot;&gt;1fr&lt;/code&gt; because we want it to completely fill whatever space is left after the first and last columns are populated with stuff.&lt;/p&gt;

&lt;p&gt;We have only two elements within &lt;code class=&quot;highlighter-rouge&quot;&gt;hero&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;award&lt;/code&gt;. We want &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; to occupy the first column of the second row, and we want &lt;code class=&quot;highlighter-rouge&quot;&gt;award&lt;/code&gt; to occupy the third column of the first row. So our complete grid definition should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;.       .  award&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;message .  .    &quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;.       .  .    &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then all we need to do is name our elements:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.award&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;award&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that, &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;award&lt;/code&gt; snap into place and our page is complete:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-complete.jpg&quot; alt=&quot;Complete Design&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Making It Responsive&lt;/h3&gt;

&lt;p&gt;CSS Grid makes it incredibly easy to rearrange your entire layout with media queries. All you do is re-place your grid items. For our design we’ll keep things fairly simple and only use two breakpoints, one at 1600px and one at 1050px. There’ll be a handful of minor formatting adjustments we’ll need to make to some elements (padding, margin, etc.), but I won’t show all of that here. I’ll present the entire code at the end, for now focusing on the grid stuff.&lt;/p&gt;

&lt;p&gt;Our 1600px breakpoint is the simpler one. It’s where we’ll reduce the outer padding of the site. I chose 1600px because that’s right around the point where the 12% padding starts to look funny. So let’s fix that. What we need to do is change the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;, reducing the first and last columns to 2%. We’ll also need to adjust the padding on our other elements to match:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.top-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.main-header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.main-footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now for the next breakpoint. We’ll be rearranging the grid items to make them lay out in a single column. As a reminder here’s how our original code looked for &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;950px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;top-bar     top-bar     top-bar     top-bar&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;main-header main-header main-header main-header&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;hero        hero        hero        hero&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;.           blog-posts  side-bar    .&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;.           news        side-bar    .&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;main-footer main-footer main-footer main-footer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s our new media query:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1050px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;top-bar     top-bar     top-bar&quot;&lt;/span&gt;
                         &lt;span class=&quot;s1&quot;&gt;&quot;main-header main-header main-header&quot;&lt;/span&gt;
                         &lt;span class=&quot;s1&quot;&gt;&quot;hero        hero        hero&quot;&lt;/span&gt;
                         &lt;span class=&quot;s1&quot;&gt;&quot;.           blog-posts  .&quot;&lt;/span&gt;
                         &lt;span class=&quot;s1&quot;&gt;&quot;.           news        .&quot;&lt;/span&gt;
                         &lt;span class=&quot;s1&quot;&gt;&quot;.           side-bar    .&quot;&lt;/span&gt;
                         &lt;span class=&quot;s1&quot;&gt;&quot;main-footer main-footer main-footer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve made a few important changes here: reduced the number of columns from four to three, changed the values of the first and last columns to &lt;code class=&quot;highlighter-rouge&quot;&gt;3%&lt;/code&gt; (3% works better than 2% at the narrower widths), added an additional row, changed the length of all the rows to &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;, and moved the side-bar to its own row. Now our page elements fit nicely at narrow widths:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/grid-page-narrow.jpg&quot; alt=&quot;Grid Page Narrow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;The Live Code&lt;/h3&gt;

&lt;p&gt;Here’s our home page, live and working, as well as the complete HTML and CSS files. To properly view this you’ll need a grid-capable browser. I suggest Chrome 49+ with the &lt;em&gt;Experimental Web Platform Features&lt;/em&gt; flag enabled (browse to chrome://flags and scroll down to “Experimental Web Platform Features”).&lt;/p&gt;

&lt;p&gt;The embedded page below will appear in mobile view by default, so be sure to click “Edit on Codepen” to see the page at full width:&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;dMdKqw&quot; data-default-tab=&quot;result&quot; data-user=&quot;chrishouse&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/chrishouse/pen/dMdKqw/&quot;&gt;Building a Home Page with Grid&lt;/a&gt; by Chris House (&lt;a href=&quot;http://codepen.io/chrishouse&quot;&gt;@chrishouse&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 -0500</pubDate>
        <link>http://chris.house/blog/building-a-home-page-with-grid/</link>
        <guid isPermaLink="true">http://chris.house/blog/building-a-home-page-with-grid/</guid>
        
        <category>css</category>
        
        <category>css grid</category>
        
        
      </item>
    
      <item>
        <title>Don&#39;t Forget About Height-Based Media Queries</title>
        <description>&lt;p&gt;I like to think I’m getting pretty good at working with media queries. After all, they’re arguably the most integral part of responsive web design, and I’ve been building mobile-friendly sites for years now. But when I think about it, it’s really only &lt;em&gt;width&lt;/em&gt;-based media queries that I’m good at. I’m an absolute viking with &lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width&lt;/code&gt;, but yesterday I ran across a situation where I needed to control the content of my design based on the &lt;em&gt;height&lt;/em&gt; of the device. This was a first for me. My initial thought was, &lt;em&gt;I’ll just use vertical media queries… wait, do those even exist?&lt;/em&gt; Google soon informed me that, thankfully, yes they do. They may never be as utilized as their width-based counterparts, but they play an important role for specific types of designs.&lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;h3&gt;When You Might Need Them&lt;/h3&gt;

&lt;p&gt;I’ll use yesterday’s experience as an example. My project’s design incorporates a scroll-free home page, which means everything on the page must fit within the viewport, and the user never sees a scrollbar. Once the device width gets down below 800px, the layout snaps into a traditional vertical-scrolling design. It may at first seem reasonable that the width-based media queries (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;max-width: 800px&lt;/code&gt;) will take care of things, but what about the &lt;em&gt;heights&lt;/em&gt; of all the displays that are wider than 800px? My design looks great on my 1920x1080 monitor, but what about smaller but relatively common sizes like 1280x800 or 1366x768?&lt;/p&gt;

&lt;h3&gt;How I Used Them&lt;/h3&gt;

&lt;p&gt;Here’s how my page looks at 1300 x 860:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/goamp-screenshot-1.jpg&quot; alt=&quot;scroll-free page at 1300 x 860&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything lays out nicely.&lt;/p&gt;

&lt;p&gt;But now look at what happens if I shorten the viewport height down to 730px:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/goamp-screenshot-2.jpg&quot; alt=&quot;scroll-free page at 1300 x 730, broken&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The bottom area begins to cut into the main area, and the three buttons are eclipsed. Not good. This is when &lt;code class=&quot;highlighter-rouge&quot;&gt;max-height&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;min-height&lt;/code&gt; come to the rescue.&lt;/p&gt;

&lt;p&gt;To help everything fit nicely at this height, I chose to do three things: spread the “Innovative assessment…” text out from 66% to 100%, reduce the size of the paragraph text in the bottom area, and reduce the size of the “Learn More” links. My CSS looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;850px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.home-message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.home-bottom&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.6rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.learn-more&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.9rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the result is much better:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/goamp-screenshot-3.jpg&quot; alt=&quot;scroll-free page at 1300 x 730, fixed&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Although vertical breakpoints aren’t very common, it’s nice to know media queries are versatile enough to make them work. I definitely couldn’t have built this page without them.&lt;/p&gt;

&lt;p&gt;Have you used height-based media queries? Share your experience in the comments.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Apr 2016 00:00:00 -0500</pubDate>
        <link>http://chris.house/blog/dont-forget-about-height-based-media-queries/</link>
        <guid isPermaLink="true">http://chris.house/blog/dont-forget-about-height-based-media-queries/</guid>
        
        <category>css</category>
        
        <category>responsive web design</category>
        
        
      </item>
    
      <item>
        <title>Why You Should Consider Linux for Web Development</title>
        <description>&lt;p&gt;If you design and/or develop for the web, chances are you’re using a Mac running OS X. There’s a slightly less, but still rather good, chance that you’re using Windows. Whichever it may be, you’re probably happy with your environment. And that’s fine, because both OS X and Windows make fine development environments. My intention with this post is &lt;em&gt;not&lt;/em&gt; to try to convince you why your operating system of choice is poor and mine is superior. But rather I simply want to present a third option, one that you’ve likely not tried and possibly not even considered. &lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;p&gt;In my experience, Linux is a fantastic fit for web development for numerous reasons. I’d like to present some of these reasons in an attempt to enlighten and inform those of you who enjoy trying out new things. Maybe you’ll find that Linux isn’t right for you, and that’s fine. But you might just discover a whole new world of convenience and efficiency, make the switch to Linux and never look back. You wouldn’t be the first.&lt;/p&gt;

&lt;h3&gt;Misconceptions About Linux&lt;/h3&gt;

&lt;p&gt;First I want to lay to rest some of the common myths and misconceptions about Linux.&lt;/p&gt;

&lt;h4&gt;Linux is Difficult to Install and Use&lt;/h4&gt;

&lt;p&gt;The first thing a new Linux user needs to understand is that there is no operating system called “Linux”. Linux is an operating system &lt;em&gt;kernel&lt;/em&gt; - the fundamental core component of an OS. When we talk about using Linux, we’re talking about using one of many &lt;em&gt;distributions&lt;/em&gt; of Linux. A Linux distribution (or “distro”) is an operating system that’s built around the Linux kernel. We often refer to the OS itself as “Linux” for simplicity’s sake.&lt;/p&gt;

&lt;p&gt;No two distros are exactly alike, and they vary wildly in terms of barrier to entry. Some are created for hardcore Linux geeks who feel right at home configuring boot loaders, installing file systems and manually compiling software. It’s this flavor of Linux that has given it the reputation of being extremely difficult to use. But other distros are geared towards users who want a fully-functioning, full-featured system that just works without any manual configuration or deep system know-how. Most popular Linux distros fall into this second category.&lt;/p&gt;

&lt;p&gt;I’m going to assume that most web developers who might consider switching to a Linux OS fall into the second category. In that case I recommend any of these distributions: &lt;a href=&quot;https://linuxmint.com/&quot;&gt;Linux Mint&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&quot;http://elementary.io/&quot;&gt;elementary OS&lt;/a&gt;, &lt;a href=&quot;http://zorinos.com/&quot;&gt;Zorin OS&lt;/a&gt;, and &lt;a href=&quot;http://zorinos.com/&quot;&gt;openSuse&lt;/a&gt;. All of these will make either Windows or OS X users feel right at home. Everything will &lt;em&gt;just work&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;Linux is “Cheap”&lt;/h4&gt;

&lt;p&gt;A strange thing happens when you tell someone that something they think should cost a lot money is, in fact, free. Their first instinct is to assume it’s of lesser quality than the similar thing they paid loads of cash for. I guess it’s understandable. If I pay $30,000 for a new Jeep and then somebody presents me with a similar looking, similar functioning vehicle that costs nothing, I’m going to assume there’s a major catch. But the truth about Linux is that there isn’t a catch. Software distribution simply doesn’t work the same way as the automobile industry (or most other industries, for that matter). Sometimes people just want to create something awesome and share it with the world. As web developers, this concept should be familiar to us, as many of us embrace and contribute to open source software. Do we think of jQuery as being “cheap” because we don’t have to pay for it? Nope. It’s the same deal with Linux.&lt;/p&gt;

&lt;h4&gt;Everything is Done on the Command Line&lt;/h4&gt;

&lt;p&gt;This is similar to the first point. There are developers out there - and no shame if you’re one of them - who would sooner get a root canal than work on the command line. While I don’t personally understand this disdain of the terminal, I can offer good news. The distributions I recommended above (and many others) don’t require any more command line use than what you’re already used to. Many tasks, like installing new software or working with build tools, are faster and easier with the command line once you’re accustomed to it, but the tasks that absolutely require it are the exception rather than the rule.&lt;/p&gt;

&lt;h4&gt;Linux isn’t Compatible with My Keyboard/Mouse/Printer/Graphics Card/USB Drive/Whatever&lt;/h4&gt;

&lt;p&gt;This may have been partially true ten years ago, but most modern Linux distros are just as plug-and-play capable as Mac or Windows. I’ve experienced more difficulty installing new hardware on Windows than I ever have on Linux. The creators and contributors to modern Linux distros typically make device compatibility one of their top priorities.&lt;/p&gt;

&lt;h3&gt;Why I Use Linux for Web Development&lt;/h3&gt;

&lt;p&gt;Let’s get to it. Here are the things I love most about Linux.&lt;/p&gt;

&lt;h4&gt;You Can Make the Environment Your Own&lt;/h4&gt;

&lt;p&gt;Ask any fan what they love most about Linux and their first answer will likely be “customizability”. As a designer I love to create unique things. And as a developer I want my environment to be &lt;em&gt;just so&lt;/em&gt;. If you’re like me in that regard, then you’ll love the amount of customizability Linux affords you. And we’re not just talking about desktop wallpapers and icon sizes. &lt;em&gt;Everything&lt;/em&gt; is customizable in Linux, from changing the placement of the menu panels to picking an entirely different desktop environment. Don’t like the command used to launch Sublime Text? Change it. Don’t like the way your windows lay against each other? Change it. And if you ever find yourself limited by the options presented, you can crack open the code and create your own options. That’s the beauty of working in an open source OS.&lt;/p&gt;

&lt;h4&gt;Linux is Free&lt;/h4&gt;

&lt;p&gt;Most distros are released under the &lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;GNU General Public License (GPL)&lt;/a&gt;, which means they’re free to use and free to copy, distribute and modify. Trying out a Linux OS is as easy as downloading the image file of the distro you’re interested in, burning it to a CD and popping it in your computer. If you like what you see, you can install it right alongside your existing OS. If you get sick of it, just download a different distro and give that one a whirl.&lt;/p&gt;

&lt;p&gt;And like I mentioned before, don’t confuse free with cheap. “You get what you pay for” typically holds true in life, but not here. Modern Linux distros are fast, elegant, feature-rich, stable and highly usable.&lt;/p&gt;

&lt;h4&gt;Your Development Environment Will Match Your Production Environment&lt;/h4&gt;

&lt;p&gt;This is a biggie. There’s a pretty darn good chance your production server is running Apache on Linux. When you’re running Linux locally you can mimic this production environment &lt;em&gt;exactly&lt;/em&gt;. Same file system permissions, same version of PHP/Ruby, same web server, etc. This means that when you test your site locally, you can be assured that it’s running precisely as it will after you deploy it, and you’re much less likely to run into platform-specific issues. This makes deployment a simpler, more predictable, more bug-free process.&lt;/p&gt;

&lt;h4&gt;Linux Runs Great on Lesser Hardware&lt;/h4&gt;

&lt;p&gt;Linux OSs are lighter and less resource-hungry than Windows or OS X, which means you can fire up that old Dell Inspiron laptop from 2003, boot up Linux, and you’ll be sailing smoothly with all your development tasks. There are even &lt;a href=&quot;http://puppylinux.org/main/Overview%20and%20Getting%20Started.htm&quot;&gt;some Linux distros so lightweight&lt;/a&gt; they can reside entirely on a small USB drive. This point is amplified when you consider the price of Linux (zero dollars). Linux makes it cheap and easy to breathe life into hardware that would have otherwise been destined for the garbage.&lt;/p&gt;

&lt;h4&gt;Linux is Stable as Hell&lt;/h4&gt;

&lt;p&gt;Nothing’s worse than having your code editor crash right when you’re in the middle of solving a tricky problem. Or worse, the OS itself freezes up and needs to be rebooted. Now, every operating system and every piece of software has the potential to crash, but in my experience, Linux OSs are by far the least prone to unexpected software crashes and buggy performance. It’s the main reason so many people use them as web servers.&lt;/p&gt;

&lt;p&gt;Some distros are more stable than others. &lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian&lt;/a&gt; has the reputation of being one of the most stable distros available. I’ve had great luck with &lt;a href=&quot;http://xubuntu.org/&quot;&gt;Xubuntu&lt;/a&gt; in terms of rock solid performance. Running Xubuntu, I haven’t had to reboot my computer in at least nine months.&lt;/p&gt;

&lt;h4&gt;Many of Your Tools Will Work Better on Linux&lt;/h4&gt;

&lt;p&gt;Many of the popular web development tools and languages were designed for Unix-like systems (e.g. Linux). Ruby, Jekyll, Grunt, Git (which was created by Linus Torvalds, the creator of Linux), to name just a few, all play nicer with Unix and Unix-based systems. You won’t need to install extra shell software or worry about system compatibility. Everything will run smooth as silk on Linux. Okay, stop screaming at your screen - I realize that Mac OS X is a Unix system and that just about everything that works in Linux will work the same on a Mac. So to be fair this point only really applies to Windows users.&lt;/p&gt;

&lt;h3&gt;Why You Shouldn’t Use Linux&lt;/h3&gt;

&lt;p&gt;I can only think of one reason, but it’s a doozy:&lt;/p&gt;

&lt;h4&gt;You Can’t Run Adobe Software on Linux&lt;/h4&gt;

&lt;p&gt;Ouch. This one hurts. But let me present you with some consolation: You can run the VM software &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt; in Linux with no problems. You can then install Windows as a virtual machine inside VirtualBox, install any Adobe software you’d like and it’ll run just fine inside your virtual Windows installation. This is what I do, and I use Photoshop nearly everyday. Since you’re effectively running an operating system within an operating system, you’ll need a machine with a decent amount of memory (I’d say 8GB minimum).&lt;/p&gt;

&lt;p&gt;You may think this solution is a bit cumbersome, and I’d understand why. Running software natively just feels nicer than running it inside a VM. But here’s why, at least for me, this solution is totally adequate: I need to run VMs &lt;em&gt;anyway&lt;/em&gt; for my Internet Explorer testing. I have four different virtual installations of Windows, each with a different version of IE. Since I live inside these virtual machines so much anyway, using one as my Photoshop machine is no sweat. I usually keep my Photoshop VM running constantly, so switching over to it is trivially easy.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you’re happy with your current OS and have no desire (or time) to try something new, there’s nothing wrong with that. I really believe that the best software is that in which you’re the most productive. But if you’re anything like me, you feel a constant desire to push your skills forward, to learn new things and to break out of your comfort zone for the sake of gaining new experiences. If that’s you, give Linux a try. You may hate it, you may love it, but at least you’ll be able to say you did it.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://chris.house/blog/why-you-should-consider-linux-for-web-development/</link>
        <guid isPermaLink="true">http://chris.house/blog/why-you-should-consider-linux-for-web-development/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>Thinking About the :has() CSS Selector</title>
        <description>&lt;p&gt;There’s a handful of really awesome new CSS Level 4 selectors on the horizon. You can read about them all in the most recent &lt;a href=&quot;https://drafts.csswg.org/selectors-4/&quot;&gt;W3C Editor’s Draft&lt;/a&gt;. I’ll likely write about more of them in the future, but there’s one in particular that I’d like to focus on for this post: &lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt;. All of the CSS Level 4 selectors do some pretty cool stuff, but &lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt; strikes me as having the most exciting possibilities.&lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt; is a &lt;em&gt;functional&lt;/em&gt; pseudo-class, which means it uses parentheses to take an argument. The argument it takes is a list of selectors that are descendants of the element. Here’s an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:has&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This article matches --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- But this article doesn&#39;t --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Vestibulum eu erat quis nibh.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since the first &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; &lt;em&gt;has&lt;/em&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; element, it matches the selector. We could use any type of selector inside the parentheses. As long as our element contains at least one of them, then we get a match:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:has&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.my-class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.another-class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This article matches --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-class&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- But this article doesn&#39;t --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Vestibulum eu erat quis nibh.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In essence this accomplishes what many consider to be the holy grail of missing CSS selectors: the parent selector.&lt;/p&gt;

&lt;h3&gt;More than Descendants&lt;/h3&gt;

&lt;p&gt;I previously stated that if our element &lt;em&gt;contains&lt;/em&gt; one of the selector arguments, then we get a match. I phrased it that way for the sake of simplicity, but it’s not totally accurate. The selectors within the parentheses don’t necessarily need to be &lt;em&gt;descendants&lt;/em&gt; of the element. They can be any selectors &lt;em&gt;scoped&lt;/em&gt; by our element. To clarify what I mean by scope, think about this CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.main-header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we’re targeting the &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; element, which is “scoped” by the &lt;code class=&quot;highlighter-rouge&quot;&gt;.main-header&lt;/code&gt; class selector but is not a descendant of it.&lt;/p&gt;

&lt;p&gt;If we wanted to target &lt;code class=&quot;highlighter-rouge&quot;&gt;.main-header&lt;/code&gt; in a similar fashion, that’s where &lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt; comes in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.main-header&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:has&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we’re saying, “select all &lt;code class=&quot;highlighter-rouge&quot;&gt;.main-header&lt;/code&gt;s that have an adjacent sibling &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; element.” And now the real power of &lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt; begins to reveal itself. It’s as if we’re able to write our selectors in reverse, selecting the leftmost element instead of the rightmost.&lt;/p&gt;

&lt;p&gt;A few more examples:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div:has(&amp;gt; input)&lt;/code&gt; - selects all &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s that are direct parents of &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;s&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;header:has(~ #my-id)&lt;/code&gt; - selects all &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; elements that are general siblings of an element with an id of &lt;code class=&quot;highlighter-rouge&quot;&gt;my-id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.area:has(span, aside)&lt;/code&gt; - selects all elements with a class of &lt;code class=&quot;highlighter-rouge&quot;&gt;area&lt;/code&gt; that have &lt;em&gt;either&lt;/em&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; or an &lt;code class=&quot;highlighter-rouge&quot;&gt;aside&lt;/code&gt; as descendants.&lt;/p&gt;

&lt;h3&gt;Getting Headscratchy with :not()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:not()&lt;/code&gt; is another useful CSS Level 4 selector that works exactly as you’d expect:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.main-heading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That selects all &lt;code class=&quot;highlighter-rouge&quot;&gt;h3&lt;/code&gt; elements that &lt;em&gt;don’t&lt;/em&gt; have &lt;code class=&quot;highlighter-rouge&quot;&gt;main-heading&lt;/code&gt; as a class name.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:not()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt; can work together to achieve some interesting results:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:has&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This selects all &lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt; elements that don’t contain any &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;But note the difference between that example and this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:has&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we’re selecting all footer elements that contain something that isn’t a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;. It’s a subtle but important difference: in the first example the footer simply needed to not contain any &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s, but it didn’t necessarily need to contain anything. In the second example the footer must contain &lt;em&gt;something&lt;/em&gt;, and that something mustn’t be a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;. Phew.&lt;/p&gt;

&lt;h3&gt;Browser Support&lt;/h3&gt;

&lt;section class=&quot;browser-support&quot;&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Internet Explorer/Edge&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Firefox&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Chrome&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Safari&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Opera&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;iOS Safari&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Chrome for Android&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;As with many of the new CSS selectors, browser support for &lt;code class=&quot;highlighter-rouge&quot;&gt;:has()&lt;/code&gt; is currently non-existent. But that shouldn’t stop you from learning it now so that you’re in on the ground floor once it’s ready to use.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://chris.house/blog/thinking-about-the-has-css-selector/</link>
        <guid isPermaLink="true">http://chris.house/blog/thinking-about-the-has-css-selector/</guid>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>Grunt Configuration for React + Browserify + Babelify</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is awesome. I recently began using it on a side project and it has quickly proven itself to be a great way to create fast, dynamic user interfaces with code that’s easy to reason about (I love that expression). It relies on the idea of components, which matches nicely with the practice of splitting your JavaScript into separate smaller files, each representing an individual component. This keeps your code super organized and manageable.&lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;p&gt;To achieve this modularity, I use a tool called &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;. This allows us to create a chain of dependencies using the Node.js syntax “require()”. If you’re using React’s JSX syntax (which you should be), you’ll need &lt;a href=&quot;https://github.com/babel/babelify&quot;&gt;Babelify&lt;/a&gt;, which is a &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; transformer specifically made for Browserify. Each time you save a .js in your React application, Babelify will convert your JSX syntax into JavaScript, and Browserify will compile all your separate .js modules together into one file that the browser understands (check out Browserify’s documentation if you don’t know how to implement it in your code). I use &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; to automate these tasks.&lt;/p&gt;

&lt;p&gt;I realize there are many different ways and many different tools to accomplish what I’m doing here. Webpack instead of Browserify, Reactify instead of Babelify, Gulp instead of Grunt, etc. If those are your tools, Google can help you. The purpose of this article is to show a sample configuration using specific tools: React, Browserify, Babelify and Grunt.&lt;/p&gt;

&lt;p&gt;Besides Grunt and React, here’s what you’ll need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jmreidy/grunt-browserify&quot;&gt;Browserify Grunt plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/babel/babelify&quot;&gt;Babelify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://babeljs.io/docs/plugins/preset-es2015/&quot;&gt;ES2015 preset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://babeljs.io/docs/plugins/preset-react/&quot;&gt;React preset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-watch&quot;&gt;Grunt Watch plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here’s my gruntfile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*gruntfile.js*/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;package.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/scripts/**/*.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;browserify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;babelify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;es2015&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;        
        &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/scripts/app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;dist/scripts/app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;grunt-contrib-watch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;grunt-browserify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;browserify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The part that tripped me up initially is the &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: [[&#39;babelify&#39;, {presets: [&#39;es2015′, &#39;react&#39;]}]]&lt;/code&gt; property within the browserify options. You must load Babelify’s &lt;strong&gt;es2015&lt;/strong&gt; and &lt;strong&gt;react&lt;/strong&gt; presets exactly like I’ve done here (&lt;strong&gt;note the double square brackets around the value&lt;/strong&gt;), or else you’ll receive errors.&lt;/p&gt;

&lt;p&gt;Hopefully this helps some people in the same situation as myself.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://chris.house/blog/grunt-configuration-for-react-browserify-babelify/</link>
        <guid isPermaLink="true">http://chris.house/blog/grunt-configuration-for-react-browserify-babelify/</guid>
        
        <category>grunt</category>
        
        <category>react</category>
        
        
      </item>
    
      <item>
        <title>Why CSS Custom Properties (a.k.a. CSS Variables) are Awesome</title>
        <description>&lt;p&gt;CSS custom properties (or CSS variables, as they’ll likely be referred to by most people) have gained a lot of attention lately with the releases of Chrome 49 and Firefox 43, both of which support them without the need for a prefix. Rob Dodson from Google recently wrote &lt;a href=&quot;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care?hl=en&quot;&gt;an excellent article on them&lt;/a&gt;. Like many people, my instant reaction was something like, &lt;em&gt;why would I need in-browser CSS variables if I use Sass?&lt;/em&gt; But after fiddling with them for a few days I now understand that their usefulness extends beyond what Sass (or any other preprocessor) is capable of.&lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;h3&gt;How CSS Variables Work&lt;/h3&gt;

&lt;p&gt;CSS variables work much the same as the variables you’re using in other languages. You make up a name, assign it a value, and then refer to that name later in your code. Here’s how you do it in CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--myColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#bada55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--myColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will set the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;background-color&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;#bada55&lt;/code&gt;. Some important things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The variable name begins with two dashes. &lt;strong&gt;This is mandatory&lt;/strong&gt;. Also, the name is case sensitive. &lt;code class=&quot;highlighter-rouge&quot;&gt;--myColor&lt;/code&gt; is different from &lt;code class=&quot;highlighter-rouge&quot;&gt;--mycolor&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The variable is set on a selector, in this case the pseudo class &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt;. But it can be any element that’s a parent of the elements that will use the variable. &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; would work pretty well too if you want your variable global.&lt;/li&gt;
  &lt;li&gt;The way you call the variable is with the &lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Stop Thinking About Sass&lt;/h3&gt;

&lt;p&gt;I know you still are. Let me show you why you need to start looking at CSS variables as a whole new beast. Think about this example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every element will have its width set to &lt;code class=&quot;highlighter-rouge&quot;&gt;--myWidth&lt;/code&gt; (via the star selector). But the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;--myWidth&lt;/code&gt; will change on a per-element basis if the element’s specificity is great enough. In other words, CSS variables follow the &lt;em&gt;cascade&lt;/em&gt;, which is something Sass variables don’t even attempt to do.&lt;/p&gt;

&lt;p&gt;Here’s another trick CSS variables have up their sleeve:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;75%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.main-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--myWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yep, you can declare variables inside of media queries. We’re through the looking glass here people…&lt;/p&gt;

&lt;h3&gt;More Cool Stuff&lt;/h3&gt;

&lt;h4&gt;Variables Within Variables&lt;/h4&gt;

&lt;p&gt;CSS variables can get their value from other variables:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--accentColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
  &lt;span class=&quot;py&quot;&gt;--logoColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--accentColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Fallback Values&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt; function allows you to set not only the variable, but any fallback values to use in case the variable is invalid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--myFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&#39;Helvetica&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--myFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Using calc()&lt;/h4&gt;

&lt;p&gt;You can use your variables inside of the calc() function, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--spacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.widget&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--spacer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;CSS Variables in JavaScript&lt;/h4&gt;

&lt;p&gt;Perhaps what separates CSS variables from Sass variables more than anything else is the ability to work with them inside JavaScript. You can use the JavaScript methods &lt;code class=&quot;highlighter-rouge&quot;&gt;getPropertyValue()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setProperty()&lt;/code&gt; to retrieve or set a CSS variable, respectively. &lt;a href=&quot;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care?hl=en&quot;&gt;Rob’s article&lt;/a&gt; has some excellent examples.&lt;/p&gt;

&lt;h3&gt;Browser Support&lt;/h3&gt;

&lt;p&gt;This is always the bummer part. But fortunately things aren’t too bad for CSS variables. Chrome and Firefox are a go! And Safari 9.1 and iOS Safari 9.3 will also introduce support.&lt;/p&gt;

&lt;section class=&quot;browser-support&quot;&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Internet Explorer/Edge&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Firefox&lt;/div&gt;
		&lt;div class=&quot;browser-support-info yes&quot;&gt;43+&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Chrome&lt;/div&gt;
		&lt;div class=&quot;browser-support-info yes&quot;&gt;49+ (48 behind flag)&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Safari&lt;/div&gt;
		&lt;div class=&quot;browser-support-info yes&quot;&gt;9.1+&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Opera&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;iOS Safari&lt;/div&gt;
		&lt;div class=&quot;browser-support-info yes&quot;&gt;9.3+&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Chrome for Android&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
&lt;/section&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope you can see how incredibly useful CSS variables are. I also hope you see that CSS variables and Sass variables are definitely &lt;em&gt;not&lt;/em&gt; in some sort of battle for dominance. Their functionality barely overlaps, and you’ll likely find that they fit nicely side-by-side in your web toolbox. Start using them today. If you need to support IE/Edge you’ll need to use caution, but it shouldn’t be too tricky to concoct a workable fallback.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://chris.house/blog/why-css-custom-properties-are-awesome/</link>
        <guid isPermaLink="true">http://chris.house/blog/why-css-custom-properties-are-awesome/</guid>
        
        <category>css</category>
        
        <category>css custom properties</category>
        
        
      </item>
    
      <item>
        <title>A Complete Guide to CSS Grid Layout</title>
        <description>&lt;h3 class=&quot;collapsible-control collapsed&quot;&gt;Introduction&lt;/h3&gt;

&lt;div class=&quot;collapsible-section&quot;&gt;
	&lt;p&gt;CSS Grid Layout (aka &quot;Grid&quot;), is a two-dimensional grid-based layout system that aims to do nothing less than completely change the way we design grid-based user interfaces. CSS has always been used to lay out our web pages, but it&#39;s never done a very good job of it. First we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). Flexbox helped out, but it&#39;s intended for simpler one-dimensional layouts, not complex two-dimensional ones (Flexbox and Grid actually work very well together). Grid is the very first CSS module created specifically to solve the layout problems we&#39;ve all been hacking our way around for as long as we&#39;ve been making websites.&lt;/p&gt;

	&lt;p&gt;There are two primary things that inspired me to create this guide. The first is Rachel Andrew&#39;s awesome book &lt;a href=&quot;http://abookapart.com/products/get-ready-for-css-grid-layout&quot;&gt;Get Ready for CSS Grid Layout.&lt;/a&gt; It&#39;s a thorough, clear introduction to Grid and is the basis of this entire article. I &lt;em&gt;highly&lt;/em&gt; encourage you to buy it and read it. My other big inspiration is Chris Coyier&#39;s &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;A Complete Guide to Flexbox&lt;/a&gt;, which has been my go-to resource for everything flexbox. It&#39;s helped a ton of people, evident by the fact that it&#39;s the top result when you Google &quot;flexbox.&quot; You&#39;ll notice many similarities between his post and mine, because why not steal from the best?&lt;/p&gt;	

	&lt;p&gt;My intention with this guide is to present the Grid concepts as they exist in the very latest version of the specification. So I won&#39;t be covering the out of date IE syntax, and I&#39;ll do my best to update this guide regularly as the spec matures.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;basics&quot; class=&quot;collapsible-control collapsed&quot;&gt;Basics and Browser Support&lt;/h3&gt;

&lt;div class=&quot;collapsible-section&quot;&gt;
	&lt;p&gt;Getting started with Grid is easy. You just define a container element as a grid with &lt;a href=&quot;#prop-display&quot;&gt;&lt;code&gt;display: grid&lt;/code&gt;&lt;/a&gt;, set the column and row sizes with &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt;, and then place its child elements into the grid with &lt;a href=&quot;#prop-grid-column-row&quot;&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-column-row&quot;&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/a&gt;. Similarly to flexbox, the source order of the grid items doesn&#39;t matter. Your CSS can place them in any order, which makes it super easy to rearrange your grid with media queries. Imagine defining the layout of your entire page, and then completely rearranging it to accommodate a different screen width all with only a couple lines of CSS. Grid is one of the most powerful CSS modules ever introduced.&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;An important thing to understand about Grid is that it&#39;s not ready to be used in production yet&lt;/strong&gt;. It&#39;s currently a &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;W3C Working Draft&lt;/a&gt; and isn&#39;t supported correctly in any browsers yet by default. Internet Explorer 10 and 11 support it, but it&#39;s an old implementation with an outdated syntax. In order to experiment with Grid today, your best bet is to use Chrome, Opera or Firefox with special flags enabled. In Chrome, navigate to &lt;a href=&quot;chrome://flags/#enable-experimental-web-platform-features&quot;&gt;chrome://flags&lt;/a&gt; and enable &quot;experimental web platform features&quot;. That method also works in Opera (&lt;a href=&quot;opera://flags/#enable-experimental-web-platform-features&quot;&gt;opera://flags&lt;/a&gt;). In Firefox, enable the layout.css.grid.enabled flag.&lt;/p&gt;

Here&#39;s a browser support table which I&#39;ll keep up-to-date:

&lt;section class=&quot;browser-support&quot;&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Internet Explorer/Edge&lt;/div&gt;
		&lt;div class=&quot;browser-support-info partial&quot;&gt;10+ (Old Syntax)&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Firefox&lt;/div&gt;
		&lt;div class=&quot;browser-support-info flagged&quot;&gt;40+ (Behind Flag)&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Chrome&lt;/div&gt;
		&lt;div class=&quot;browser-support-info flagged&quot;&gt;29+ (Behind Flag)&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Safari&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Opera&lt;/div&gt;
		&lt;div class=&quot;browser-support-info flagged&quot;&gt;28+ (Behind Flag)&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;iOS Safari&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;browser-support-cell&quot;&gt;
		&lt;div class=&quot;browser-support-name&quot;&gt;Chrome for Android&lt;/div&gt;
		&lt;div class=&quot;browser-support-info no&quot;&gt;Not Supported&lt;/div&gt;
	&lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Aside from Microsoft, browser manufacturers appear to be holding off on letting Grid loose in the wild until the spec is fully cooked. This is a good thing, as it means we won&#39;t have to worry about learning multiple syntaxes.&lt;/p&gt;

&lt;p&gt;It&#39;s only a matter of time before you can use Grid in production. But the time to learn it is now.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 class=&quot;collapsible-control collapsed&quot;&gt;Important Terminology&lt;/h3&gt;
&lt;div class=&quot;collapsible-section&quot;&gt;
	&lt;p&gt;Before diving into the concepts of Grid it&#39;s important to understand the terminology. Since the terms involved here are all kinda conceptually similar, it&#39;s easy to confuse them with one another if you don&#39;t first memorize their meanings defined by the Grid specification. But don&#39;t worry, there aren&#39;t many of them.&lt;/p&gt;

	&lt;section class=&quot;grid-terms&quot;&gt;
		&lt;div class=&quot;grid-term-container&quot;&gt;
			&lt;div class=&quot;grid-terms-term&quot;&gt;
				&lt;h4&gt;Grid Container&lt;/h4&gt;
				&lt;span&gt;The element on which &lt;code&gt;display: grid&lt;/code&gt; is applied. It&#39;s the direct parent of all the grid items. In this example &lt;code&gt;container&lt;/code&gt; is the grid container.&lt;/span&gt;
			&lt;/div&gt;
			&lt;div class=&quot;grid-terms-diagram&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item item-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item item-2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item item-3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

			&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;grid-term-container&quot;&gt;
			&lt;div class=&quot;grid-terms-term&quot;&gt;
				&lt;h4&gt;Grid Item&lt;/h4&gt;
				&lt;span&gt;The children (e.g. &lt;em&gt;direct&lt;/em&gt; descendants) of the grid container. Here the &lt;code&gt;item&lt;/code&gt; elements are grid items, but &lt;code&gt;sub-item&lt;/code&gt; isn&#39;t.&lt;/span&gt;
			&lt;/div&gt;
			&lt;div class=&quot;grid-terms-diagram&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
				
			&lt;/div&gt;
		&lt;/div&gt;		
		&lt;div class=&quot;grid-term-container&quot;&gt;
			&lt;div class=&quot;grid-terms-term&quot;&gt;
				&lt;h4&gt;Grid Line&lt;/h4&gt;
				&lt;p&gt;The dividing lines that make up the structure of the grid. They can be either vertical (&quot;column grid lines&quot;) or horizontal (&quot;row grid lines&quot;) and reside on either side of a row or column. Here the yellow line is an example of a column grid line.&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;grid-terms-diagram&quot;&gt;
				&lt;div class=&quot;grid-diagram grid-diagram-line&quot;&gt;
					&lt;div class=&quot;cell-1&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-2&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-3&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-4&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-5&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-6&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;grid-term-container&quot;&gt;
			&lt;div class=&quot;grid-terms-term&quot;&gt;
				&lt;h4&gt;Grid Track&lt;/h4&gt;
				&lt;p&gt;The space between two adjacent grid lines. You can think of them like the columns or rows of the grid. Here&#39;s the grid track between the second and third row grid lines.&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;grid-terms-diagram&quot;&gt;
				&lt;div class=&quot;grid-diagram grid-diagram-track&quot;&gt;
					&lt;div class=&quot;cell-1&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-2&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-3&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-4&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-5&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-6&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;grid-term-container&quot;&gt;
			&lt;div class=&quot;grid-terms-term&quot;&gt;
				&lt;h4&gt;Grid Cell&lt;/h4&gt;
				&lt;p&gt;The space between two adjacent row and two adjacent column grid lines. It&#39;s a single &quot;unit&quot; of the grid. Here&#39;s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3.&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;grid-terms-diagram&quot;&gt;
				&lt;div class=&quot;grid-diagram grid-diagram-cell&quot;&gt;
					&lt;div class=&quot;cell-1&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-2&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-3&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-4&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-5&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-6&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;				
			&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;grid-term-container&quot;&gt;
			&lt;div class=&quot;grid-terms-term&quot;&gt;
				&lt;h4&gt;Grid Area&lt;/h4&gt;
				&lt;p&gt;The total space surrounded by four grid lines. A grid area may be comprised of any number of grid cells. Here&#39;s the grid area between row grid lines 1 and 3, and column grid lines 1 and 3.&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;grid-terms-diagram&quot;&gt;
				&lt;div class=&quot;grid-diagram grid-diagram-area&quot;&gt;
					&lt;div class=&quot;cell-1&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-2&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-3&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-4&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-5&quot;&gt;&lt;/div&gt;
					&lt;div class=&quot;cell-6&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;				
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/section&gt;
&lt;/div&gt;

&lt;h3 class=&quot;collapsible-control expanded&quot;&gt;Grid Properties Table of Contents&lt;/h3&gt;
&lt;div class=&quot;props-table-of-contents-container collapsible-section&quot;&gt;
	&lt;div class=&quot;props-table-of-contents-left&quot;&gt;
		&lt;h4&gt;Properties for the Grid Container&lt;/h4&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-display&quot;&gt;display&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;grid-template-columns&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;grid-template-rows&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-template-areas&quot;&gt;grid-template-areas&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;grid-column-gap&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;grid-row-gap&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-gap&quot;&gt;grid-gap&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-justify-items&quot;&gt;justify-items&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-align-items&quot;&gt;align-items&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-justify-content&quot;&gt;justify-content&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-align-content&quot;&gt;align-content&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;grid-auto-columns&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;grid-auto-rows&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-auto-flow&quot;&gt;grid-auto-flow&lt;/a&gt;&lt;/li&gt;			
			&lt;li&gt;&lt;a href=&quot;#prop-grid&quot;&gt;grid&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;div class=&quot;props-table-of-contents-right&quot;&gt;
		&lt;h4&gt;Properties for the Grid Items&lt;/h4&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;grid-column-start&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;grid-column-end&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;grid-row-start&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;grid-row-end&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row&quot;&gt;grid-column&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-column-row&quot;&gt;grid-row&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-grid-area&quot;&gt;grid-area&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-justify-self&quot;&gt;justify-self&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#prop-align-self&quot;&gt;align-self&lt;/a&gt;&lt;/li&gt;			
		&lt;/ul&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;collapsible-control expanded&quot;&gt;Properties for the Grid Container&lt;/h3&gt;

&lt;section class=&quot;grid-terms collapsible-section&quot;&gt;
	&lt;div id=&quot;prop-display&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;display&lt;/h4&gt;
		&lt;p&gt;Defines the element as a grid container and establishes a new &lt;em&gt;grid formatting context&lt;/em&gt; for its contents.&lt;/p&gt;	
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;grid&lt;/b&gt; - generates a block-level grid&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;inline-grid&lt;/b&gt; - generates an inline-level grid&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-grid&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
			
		&lt;p&gt;Note: &lt;code&gt;column&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, and &lt;code&gt;vertical-align&lt;/code&gt; have no effect on a grid container.&lt;/p&gt;			
		&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;		
	&lt;/div&gt;	

	&lt;div id=&quot;prop-grid-template-columns-rows&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;grid-template-columns&lt;br /&gt;grid-template-rows&lt;/h4&gt;
		&lt;p&gt;Defines the columns and rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line.&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;track-size&amp;gt;&lt;/b&gt; - can be a length, a percentage, or a fraction of the free space in the grid (using the &lt;a href=&quot;#fr-unit&quot;&gt;&lt;code&gt;fr&lt;/code&gt;&lt;/a&gt; unit)&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;line-name&amp;gt;&lt;/b&gt; - an arbitrary name of your choosing&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;subgrid&lt;/b&gt; - if your grid container is itself a grid item (i.e. nested grids), you can use this property to indicate that you want the sizes of its rows/columns to be taken from its parent rather than specifying its own.&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line-name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line-name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	

&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;When you leave an empty space between the track values, the grid lines are automatically assigned numerical names:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;img src=&quot;/images/grid-numbers.png&quot; alt=&quot;Grid with auto named lines&quot; /&gt;
&lt;p&gt;But you can choose to explicitly name the lines. Note the bracket syntax for the line names:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col4-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;img src=&quot;/images/grid-names.png&quot; alt=&quot;Grid with user named lines&quot; /&gt;
	&lt;p&gt;Note that a line can have more than one name. For example, here the second line will have two names: row1-end and row2-start:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


	&lt;p&gt;If your definition contains repeating parts, you can use the &lt;code&gt;repeat()&lt;/code&gt; notation to streamline things:&lt;/p&gt;	

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	

&lt;p&gt;Which is equivalent to this:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
&lt;p id=&quot;fr-unit&quot;&gt;The &lt;code&gt;fr&lt;/code&gt; unit allows you to set the size of a track as a fraction of the free space of the grid container. For example, this will set each item to one third the width of the grid container:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The free space is calculated &lt;em&gt;after&lt;/em&gt; any non-flexible items. In this example the total amount of free space available to the &lt;code&gt;fr&lt;/code&gt; units doesn&#39;t include the 50px:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;	

	&lt;div id=&quot;prop-grid-template-areas&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;grid-template-areas&lt;/h4&gt;
		&lt;p&gt;Defines a grid template by referencing the names of the grid areas which are specified with the &lt;a href=&quot;#prop-grid-area&quot;&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/a&gt; property. Repeating the name of a grid area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.&lt;/p&gt;	
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;			
			&lt;li&gt;&lt;b&gt;&amp;lt;grid-area-name&amp;gt;&lt;/b&gt; - the name of a grid area specified with &lt;a href=&quot;#prop-grid-area&quot;&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;.&lt;/b&gt; - a period signifies an empty grid cell&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;none&lt;/b&gt; - no grid areas are defined&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;&amp;lt;grid-area-name&amp;gt; | . | none | ...&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;...&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
			
		&lt;p&gt;Example:&lt;/p&gt;	

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.item-b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.item-c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.item-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;header header header header&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;main main . sidebar&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;footer footer footer footer&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;p&gt;That&#39;ll create a grid that&#39;s four columns wide by three rows tall. The entire top row will be comprised of the &lt;b&gt;header&lt;/b&gt; area. The middle row will be comprised of two &lt;b&gt;main&lt;/b&gt; areas, one empty cell, and one &lt;b&gt;sidebar&lt;/b&gt; area. The last row is all &lt;b&gt;footer&lt;/b&gt;.&lt;/p&gt;
	&lt;img src=&quot;/images/grid-template-areas.png&quot; alt=&quot;Example of grid-template-areas&quot; /&gt;
	&lt;p&gt;Each row in your declaration needs to have the same number of cells.&lt;/p&gt;
	&lt;p&gt;You can use any number of adjacent periods to declare a single empty cell. As long as the periods have no spaces between them they represent a single cell.&lt;/p&gt;
	&lt;p&gt;Notice that you&#39;re not naming lines with this syntax, just areas. When you use this syntax the lines on either end of the areas are actually getting named automatically. If the name of your grid area is &lt;b&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/b&gt;, the name of the area&#39;s starting row line and starting column line will be &lt;b&gt;&lt;em&gt;foo&lt;/em&gt;-start&lt;/b&gt;, and the name of its last row line and last column line will be &lt;b&gt;&lt;em&gt;foo&lt;/em&gt;-end&lt;/b&gt;. This means that some lines might have multiple names, such as the far left line in the above example, which will have three names: header-start, main-start, and footer-start.&lt;/p&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;

	&lt;div id=&quot;prop-grid-column-row-gap&quot; class=&quot;grid-properties&quot;&gt;
	&lt;h4&gt;grid-column-gap&lt;br /&gt;grid-row-gap&lt;/h4&gt;
	&lt;p&gt;Specifies the size of the grid lines. You can think of it like setting the width of the gutters between the columns/rows.&lt;/p&gt;
	&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;			
			&lt;li&gt;&lt;b&gt;&amp;lt;line-size&amp;gt;&lt;/b&gt; - a length value&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-column-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-row-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
  &lt;span class=&quot;py&quot;&gt;grid-column-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-row-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-column-row-gap.png&quot; alt=&quot;Example of grid-column-gap and grid-row-gap&quot; /&gt;
	&lt;p&gt;The gutters are only created &lt;em&gt;between&lt;/em&gt; the columns/rows, not on the outer edges.&lt;/p&gt;			

	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;
	&lt;/div&gt;


	&lt;div id=&quot;prop-grid-gap&quot; class=&quot;grid-properties&quot;&gt;
	&lt;h4&gt;grid-gap&lt;/h4&gt;
	&lt;p&gt;A shorthand for &lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
	&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;			
			&lt;li&gt;&lt;b&gt;&amp;lt;grid-column-gap&amp;gt; &amp;lt;grid-row-gap&amp;gt;&lt;/b&gt; - length values&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-column-gap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-row-gap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
  &lt;span class=&quot;py&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;p&gt;If no &lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/a&gt; is specified, it&#39;s set to the same value as &lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;		

	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;
	&lt;/div&gt;


&lt;div id=&quot;prop-justify-items&quot; class=&quot;grid-properties&quot;&gt;
	&lt;h4&gt;justify-items&lt;/h4&gt;
	&lt;p&gt;Aligns the content inside a grid item along the &lt;em&gt;column&lt;/em&gt; axis (as opposed to &lt;a href=&quot;#prop-align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt; which aligns along the &lt;em&gt;row&lt;/em&gt; axis). This value applies to all grid items inside the container.&lt;/p&gt;
	&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;						
			&lt;li&gt;&lt;b&gt;start&lt;/b&gt; - aligns the content to the left end of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;end&lt;/b&gt; - aligns the content to the right end of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;center&lt;/b&gt; - aligns the content in the center of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;stretch&lt;/b&gt; - fills the whole width of the grid area (this is the default)&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-items-start.png&quot; alt=&quot;Example of justify-items set to start&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-items-end.png&quot; alt=&quot;Example of justify-items set to end&quot; /&gt;
	
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-items-center.png&quot; alt=&quot;Example of justify-items set to center&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-items-stretch.png&quot; alt=&quot;Example of justify-items set to stretch&quot; /&gt;	
	&lt;p&gt;This behavior can also be set on individual grid items via the &lt;a href=&quot;#prop-justify-self&quot;&gt;&lt;code&gt;justify-self&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;		

	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;
	&lt;/div&gt;	


	&lt;div id=&quot;prop-align-items&quot; class=&quot;grid-properties&quot;&gt;
	&lt;h4&gt;align-items&lt;/h4&gt;
	&lt;p&gt;Aligns the content inside a grid item along the &lt;em&gt;row&lt;/em&gt; axis (as opposed to &lt;a href=&quot;#prop-justify-items&quot;&gt;&lt;code&gt;justify-items&lt;/code&gt;&lt;/a&gt; which aligns along the &lt;em&gt;column&lt;/em&gt; axis). This value applies to all grid items inside the container.&lt;/p&gt;
	&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;						
			&lt;li&gt;&lt;b&gt;start&lt;/b&gt; - aligns the content to the top of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;end&lt;/b&gt; - aligns the content to the bottom of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;center&lt;/b&gt; - aligns the content in the center of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;stretch&lt;/b&gt; - fills the whole height of the grid area (this is the default)&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-items-start.png&quot; alt=&quot;Example of align-items set to start&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-items-end.png&quot; alt=&quot;Example of align-items set to end&quot; /&gt;
	
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-items-center.png&quot; alt=&quot;Example of align-items set to center&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-items-stretch.png&quot; alt=&quot;Example of align-items set to stretch&quot; /&gt;	
	&lt;p&gt;This behavior can also be set on individual grid items via the &lt;a href=&quot;#prop-align-self&quot;&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;		

	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;
	&lt;/div&gt;


	&lt;div id=&quot;prop-justify-content&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;justify-content&lt;/h4&gt;
		&lt;p&gt;Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like &lt;code&gt;px&lt;/code&gt;. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the &lt;em&gt;column&lt;/em&gt; axis (as opposed to &lt;a href=&quot;#prop-align-content&quot;&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/a&gt; which aligns the grid along the &lt;em&gt;row&lt;/em&gt; axis).&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;value-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;start&lt;/b&gt; - aligns the grid to the left end of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;end&lt;/b&gt; - aligns the grid to the right end of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;center&lt;/b&gt; - aligns the grid in the center of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;stretch&lt;/b&gt; - resizes the grid items to allow the grid to fill the full width of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;space-around&lt;/b&gt; - places an even amount of space between each grid item, with half-sized spaces on the far ends&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;space-between&lt;/b&gt; - places an even amount of space between each grid item, with no space at the far ends&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;space-evenly&lt;/b&gt; - places an even amount of space between each grid item, including the far ends&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-evenly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-start.png&quot; alt=&quot;Example of justify-content set to start&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-end.png&quot; alt=&quot;Example of justify-content set to end&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-center.png&quot; alt=&quot;Example of justify-content set to center&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-stretch.png&quot; alt=&quot;Example of justify-content set to stretch&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-space-around.png&quot; alt=&quot;Example of justify-content set to space-around&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-space-between.png&quot; alt=&quot;Example of justify-content set to space-between&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-evenly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-justify-content-space-evenly.png&quot; alt=&quot;Example of justify-content set to space-evenly&quot; /&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;								
	&lt;/div&gt;


&lt;div id=&quot;prop-align-content&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;align-content&lt;/h4&gt;
		&lt;p&gt;Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like &lt;code&gt;px&lt;/code&gt;. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the &lt;em&gt;row&lt;/em&gt; axis (as opposed to &lt;a href=&quot;#prop-justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; which aligns the grid along the &lt;em&gt;column&lt;/em&gt; axis).&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;value-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;start&lt;/b&gt; - aligns the grid to the top of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;end&lt;/b&gt; - aligns the grid to the bottom of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;center&lt;/b&gt; - aligns the grid in the center of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;stretch&lt;/b&gt; - resizes the grid items to allow the grid to fill the full height of the grid container&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;space-around&lt;/b&gt; - places an even amount of space between each grid item, with half-sized spaces on the far ends&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;space-between&lt;/b&gt; - places an even amount of space between each grid item, with no space at the far ends&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;space-evenly&lt;/b&gt; - places an even amount of space between each grid item, including the far ends&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-evenly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-start.png&quot; alt=&quot;Example of align-content set to start&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-end.png&quot; alt=&quot;Example of align-content set to end&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-center.png&quot; alt=&quot;Example of align-content set to center&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-stretch.png&quot; alt=&quot;Example of align-content set to stretch&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-space-around.png&quot; alt=&quot;Example of align-content set to space-around&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-space-between.png&quot; alt=&quot;Example of align-content set to space-between&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-evenly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
	&lt;img src=&quot;/images/grid-align-content-space-evenly.png&quot; alt=&quot;Example of align-content set to space-evenly&quot; /&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;								
	&lt;/div&gt;	


	&lt;div id=&quot;prop-grid-auto-columns-rows&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;grid-auto-columns&lt;br /&gt;grid-auto-rows&lt;/h4&gt;
		&lt;p&gt;Specifies the size of any auto-generated grid tracks (aka &lt;em&gt;implicit grid tracks&lt;/em&gt;). Implicit grid tracks get created when you explicitly position rows or columns (via &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt;) that are out of range of the defined grid.&lt;/p&gt;	
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;			
			&lt;li&gt;&lt;b&gt;&amp;lt;track-size&amp;gt;&lt;/b&gt; - can be a length, a percentage, or a fraction of the free space in the grid (using the &lt;a href=&quot;#fr-unit&quot;&gt;&lt;code&gt;fr&lt;/code&gt;&lt;/a&gt; unit)&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-auto-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-auto-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
		&lt;p&gt;To illustrate how implicit grid tracks get created, think about this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90px&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;img src=&quot;/images/grid-auto.png&quot; alt=&quot;Example of 2 x 2 grid&quot; /&gt;
&lt;p&gt;This creates a 2 x 2 grid.&lt;/p&gt;
&lt;p&gt;But now imagine you use &lt;a href=&quot;#prop-grid-column-row&quot;&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-column-row&quot;&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/a&gt; to position your grid items like this:&lt;/p&gt;		

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.item-b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;img src=&quot;/images/implicit-tracks.png&quot; alt=&quot;Example of implicit tracks&quot; /&gt;
	&lt;p&gt;We told .item-b to start on column line 5 and end at column line 6, &lt;em&gt;but we never defined a column line 5 or 6&lt;/em&gt;. Because we referenced lines that don&#39;t exist, implicit tracks with widths of 0 are created to fill in the gaps. We can use &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; to specify the widths of these implicit tracks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-auto-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/implicit-tracks-with-widths.png&quot; alt=&quot;Example of implicit tracks&quot; /&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;


	&lt;div id=&quot;prop-grid-auto-flow&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;grid-auto-flow&lt;/h4&gt;
		&lt;p&gt;If you have grid items that you don&#39;t explicitly place on the grid, the &lt;em&gt;auto-placement algorithm&lt;/em&gt; kicks in to automatically place the items. This property controls how the auto-placement algorithm works.&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;			
			&lt;li&gt;&lt;b&gt;row&lt;/b&gt; - tells the auto-placement algorithm to fill in each row in turn, adding new rows as necessary&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;column&lt;/b&gt; - tells the auto-placement algorithm to fill in each column in turn, adding new columns as necessary&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;dense&lt;/b&gt; - tells the auto-placement algorithm to attempt to fill in holes earlier in the grid if smaller items come up later&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
		&lt;p&gt;Note that &lt;b&gt;dense&lt;/b&gt; might cause your items to appear out of order.&lt;/p&gt;
		&lt;p&gt;Examples:&lt;/p&gt;
		&lt;p&gt;Consider this HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item-a&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;item-a&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item-b&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;item-b&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item-c&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;item-c&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item-d&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;item-d&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item-e&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;item-e&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

		&lt;p&gt;You define a grid with five columns and two rows, and set &lt;code&gt;grid-auto-flow&lt;/code&gt; to &lt;code&gt;row&lt;/code&gt; (which is also the default):&lt;/p&gt;	

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

		&lt;p&gt;When placing the items on the grid, you only specify spots for two of them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.item-e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
		
		&lt;p&gt;Because we set &lt;code&gt;grid-auto-flow&lt;/code&gt; to &lt;code&gt;row&lt;/code&gt;, our grid will look like this. Notice how the three items we didn&#39;t place (&lt;b&gt;item-b&lt;/b&gt;, &lt;b&gt;item-c&lt;/b&gt; and &lt;b&gt;item-d&lt;/b&gt;) flow across the available rows:&lt;/p&gt;
		&lt;img src=&quot;/images/grid-auto-flow-row.png&quot; alt=&quot;Example of grid-auto-flow set to row&quot; /&gt;
		&lt;p&gt;If we instead set &lt;code&gt;grid-auto-flow&lt;/code&gt; to &lt;code&gt;column&lt;/code&gt;, &lt;b&gt;item-b&lt;/b&gt;, &lt;b&gt;item-c&lt;/b&gt; and &lt;b&gt;item-d&lt;/b&gt; flow down the columns:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
		&lt;img src=&quot;/images/grid-auto-flow-column.png&quot; alt=&quot;Example of grid-auto-flow set to column&quot; /&gt;	
		&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;

	&lt;div id=&quot;prop-grid&quot; class=&quot;grid-properties&quot;&gt;
		&lt;h4&gt;grid&lt;/h4&gt;
		&lt;p&gt;A shorthand for setting all of the following properties in a single declaration: &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#prop-grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#prop-grid-auto-flow&quot;&gt;&lt;code&gt;grid-auto-flow&lt;/code&gt;&lt;/a&gt;. It also sets &lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-column-row-gap&quot;&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/a&gt; to their initial values, even though they can&#39;t be explicitly set by this property.&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;			
			&lt;li&gt;&lt;b&gt;none&lt;/b&gt; - sets all sub-properties to their initial values&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;subgrid&lt;/b&gt; - sets &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;subgrid&lt;/code&gt;, and all other sub-properties to their initial values&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;grid-template-rows&amp;gt; / &amp;lt;grid-template-columns&amp;gt;&lt;/b&gt; - sets &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-template-columns-rows&quot;&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/a&gt; to the specified values, respectively, and all other sub-properties to their initial values&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;grid-auto-flow&amp;gt; [&amp;lt;grid-auto-rows&amp;gt; [ / &amp;lt;grid-auto-columns&amp;gt;] ] &lt;/b&gt; - accepts all the same values as &lt;a href=&quot;#prop-grid-auto-flow&quot;&gt;&lt;code&gt;grid-auto-flow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt;, respectively. If &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt; is omitted, it is set to the value specified for &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt;. If both are omitted, they are set to their initial values&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgrid&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-auto-rows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid-auto-columns&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
			
		&lt;p&gt;Examples:&lt;/p&gt;
		&lt;p&gt;The following two code blocks are equivalent:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

		&lt;p&gt;And the following two code blocks are equivalent:&lt;/p&gt;	

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-auto-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-auto-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	

		&lt;p&gt;It also accepts a more complex but quite handy syntax for setting everything at once. You specify &lt;a href=&quot;#prop-grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#prop-grid-auto-columns-rows&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt;, and all the other sub-properties are set to their initial values. What you&#39;re doing is specifying the line names and track sizes inline with their respective grid areas. This is easiest to describe with an example:&lt;/p&gt;	

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;header header header&quot;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;footer footer footer&quot;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
&lt;p&gt;That&#39;s equivalent to this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;header header header&quot;&lt;/span&gt;
                       &lt;span class=&quot;s1&quot;&gt;&quot;footer footer footer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1-end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



		&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;

&lt;/section&gt;

&lt;h3 class=&quot;collapsible-control expanded&quot;&gt;Properties for the Grid Items&lt;/h3&gt;

&lt;section class=&quot;grid-terms collapsible-section&quot;&gt;
	&lt;div id=&quot;prop-grid-column-row-start-end&quot; class=&quot;grid-properties grid-properties-item&quot;&gt;
		&lt;h4&gt;grid-column-start&lt;br /&gt;grid-column-end&lt;br /&gt;grid-row-start&lt;br /&gt;grid-row-end&lt;/h4&gt;
		&lt;p&gt;Determines a grid item&#39;s location within the grid by referring to specific grid lines. &lt;code&gt;grid-column-start&lt;/code&gt;/&lt;code&gt;grid-row-start&lt;/code&gt; is the line where the item begins, and &lt;code&gt;grid-column-end&lt;/code&gt;/&lt;code&gt;grid-row-end&lt;/code&gt; is the line where the item ends.&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;line&amp;gt;&lt;/b&gt; - can be a number to refer to a numbered grid line, or a name to refer to a named grid line&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;span &amp;lt;number&amp;gt;&lt;/b&gt; - the item will span across the provided number of grid tracks&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;span &amp;lt;name&amp;gt;&lt;/b&gt; - the item will span across until it hits the next line with the provided name&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;auto&lt;/b&gt; - indicates auto-placement, an automatic span, or a default span of one&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-column-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;grid-column-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;grid-row-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;grid-row-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
		&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-column-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-column-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-row-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row1-start&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;grid-row-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;img src=&quot;/images/grid-start-end-a.png&quot; alt=&quot;Example of grid-row/column-start/end&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-column-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-column-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col4-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-row-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;grid-row-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;img src=&quot;/images/grid-start-end-b.png&quot; alt=&quot;Example of grid-row/column-start/end&quot; /&gt;
	&lt;p&gt;If no &lt;code&gt;grid-column-end&lt;/code&gt;/&lt;code&gt;grid-row-end&lt;/code&gt; is declared, the item will span 1 track by default.&lt;/p&gt;
	&lt;p&gt;Items can overlap each other. You can use &lt;code&gt;z-index&lt;/code&gt; to control their stacking order.&lt;/p&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;

&lt;div id=&quot;prop-grid-column-row&quot; class=&quot;grid-properties grid-properties-item&quot;&gt;
		&lt;h4&gt;grid-column&lt;br /&gt;grid-row&lt;/h4&gt;
		&lt;p&gt;Shorthand for &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/a&gt;, respectively.&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;start-line&amp;gt; / &amp;lt;end-line&amp;gt;&lt;/b&gt; - each one accepts all the same values as the longhand version, including span&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
		&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third-line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;img src=&quot;/images/grid-start-end-c.png&quot; alt=&quot;Example of grid-column/grid-row&quot; /&gt;
	&lt;p&gt;If no end line value is declared, the item will span 1 track by default.&lt;/p&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;	

&lt;div id=&quot;prop-grid-area&quot; class=&quot;grid-properties grid-properties-item&quot;&gt;
		&lt;h4&gt;grid-area&lt;/h4&gt;
		&lt;p&gt;Gives an item a name so that it can be referenced by a template created with the &lt;a href=&quot;#prop-grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt; property. Alternatively, this property can be used as an even shorter shorthand for &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
		&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;name&amp;gt;&lt;/b&gt; - a name of your choosing&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;&amp;lt;row-start&amp;gt; / &amp;lt;column-start&amp;gt; / &amp;lt;row-end&amp;gt; / &amp;lt;column-end&amp;gt;&lt;/b&gt; - can be numbers or named lines&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row-start&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column-start&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row-end&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column-end&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
		&lt;p&gt;Examples:&lt;/p&gt;
		&lt;p&gt;As a way to assign a name to the item:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

		&lt;p&gt;As the short-shorthand for &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#prop-grid-column-row-start-end&quot;&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col4-start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last-line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;img src=&quot;/images/grid-start-end-d.png&quot; alt=&quot;Example of grid-area&quot; /&gt;
	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;	
	&lt;/div&gt;


&lt;div id=&quot;prop-justify-self&quot; class=&quot;grid-properties grid-properties-item&quot;&gt;
	&lt;h4&gt;justify-self&lt;/h4&gt;
	&lt;p&gt;Aligns the content inside a grid item along the &lt;em&gt;column&lt;/em&gt; axis (as opposed to &lt;a href=&quot;#prop-align-self&quot;&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/a&gt; which aligns along the &lt;em&gt;row&lt;/em&gt; axis). This value applies to the content inside a single grid item.&lt;/p&gt;
	&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;						
			&lt;li&gt;&lt;b&gt;start&lt;/b&gt; - aligns the content to the left end of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;end&lt;/b&gt; - aligns the content to the right end of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;center&lt;/b&gt; - aligns the content in the center of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;stretch&lt;/b&gt; - fills the whole width of the grid area (this is the default)&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-self-start.png&quot; alt=&quot;Example of justify-self set to start&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-self-end.png&quot; alt=&quot;Example of justify-self set to end&quot; /&gt;
	
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-self-center.png&quot; alt=&quot;Example of justify-self set to center&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;justify-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-justify-self-stretch.png&quot; alt=&quot;Example of justify-self set to stretch&quot; /&gt;	
	&lt;p&gt;To set alignment for &lt;em&gt;all&lt;/em&gt; the items in a grid, this behavior can also be set on the grid container via the &lt;a href=&quot;#prop-justify-items&quot;&gt;&lt;code&gt;justify-items&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;		

	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;
	&lt;/div&gt;	


&lt;div id=&quot;prop-align-self&quot; class=&quot;grid-properties grid-properties-item&quot;&gt;
	&lt;h4&gt;align-self&lt;/h4&gt;
	&lt;p&gt;Aligns the content inside a grid item along the &lt;em&gt;row&lt;/em&gt; axis (as opposed to &lt;a href=&quot;#prop-justify-self&quot;&gt;&lt;code&gt;justify-self&lt;/code&gt;&lt;/a&gt; which aligns along the &lt;em&gt;column&lt;/em&gt; axis). This value applies to the content inside a single grid item.&lt;/p&gt;
	&lt;h5&gt;Values:&lt;/h5&gt;
		&lt;ul class=&quot;values-list&quot;&gt;						
			&lt;li&gt;&lt;b&gt;start&lt;/b&gt; - aligns the content to the top of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;end&lt;/b&gt; - aligns the content to the bottom of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;center&lt;/b&gt; - aligns the content in the center of the grid area&lt;/li&gt;
			&lt;li&gt;&lt;b&gt;stretch&lt;/b&gt; - fills the whole height of the grid area (this is the default)&lt;/li&gt;
		&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-self-start.png&quot; alt=&quot;Example of align-self set to start&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-self-end.png&quot; alt=&quot;Example of align-self set to end&quot; /&gt;
	
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-self-center.png&quot; alt=&quot;Example of align-self set to center&quot; /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.item-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
	
	&lt;img src=&quot;/images/grid-align-self-stretch.png&quot; alt=&quot;Example of align-self set to stretch&quot; /&gt;	
	&lt;p&gt;To align &lt;em&gt;all&lt;/em&gt; the items in a grid, this behavior can also be set on the grid container via the &lt;a href=&quot;#prop-align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;		

	&lt;a class=&quot;top-link&quot; href=&quot;#top&quot;&gt;[top]&lt;/a&gt;
	&lt;/div&gt;

&lt;/section&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://chris.house/blog/a-complete-guide-css-grid-layout/</link>
        <guid isPermaLink="true">http://chris.house/blog/a-complete-guide-css-grid-layout/</guid>
        
        <category>css</category>
        
        <category>css grid</category>
        
        
      </item>
    
      <item>
        <title>Building a Simple Archive Page with Jekyll</title>
        <description>&lt;p&gt;I recently decided to build an archive page for my &lt;a href=&quot;http://www.jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site. Nothing fancy, just a list of posts grouped by year. I turned to the official Jekyll documentation and was surprised to come up empty handed. My next stop was Google, which brought me to &lt;a href=&quot;http://stackoverflow.com/questions/19086284/jekyll-liquid-templating-how-to-group-blog-posts-by-year/20777475&quot;&gt;this question&lt;/a&gt; on Stackoverflow. User &lt;a href=&quot;http://stackoverflow.com/users/6884/christian-specht&quot;&gt;Christian Specht&lt;/a&gt; presented an answer so good I felt the need to share it.&lt;/p&gt;

&lt;p&gt;The first step is to create the page itself. You can either create &lt;em&gt;archive.html&lt;/em&gt; at the root of your project, or you can create a directory called &lt;em&gt;archive&lt;/em&gt; with a &lt;em&gt;index.html&lt;/em&gt; inside of it.&lt;/p&gt;

&lt;p&gt;Now start building your archive page like you would any other Jekyll page, starting with the front matter and a containing element for your archive list:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Archive&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/archive/&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s how I want the final archive list to look:&lt;/p&gt;

&lt;div class=&quot;archive content-highlighted&quot;&gt;
	&lt;div class=&quot;post-list&quot;&gt;
		&lt;h1&gt;2016&lt;/h1&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;March 3, 2016&lt;/span&gt; - A Blog Post from March&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;February 26, 2016&lt;/span&gt; - Here&#39;s the Title of the Blog Post&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;February 15, 2016&lt;/span&gt; - Another Spectacular Article from 2016&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;January 9, 2016&lt;/span&gt; - The First Blog Post of the Year&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;h1&gt;2015&lt;/h1&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;December 25, 2015&lt;/span&gt; - Merry Christmas!&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;November 10, 2015&lt;/span&gt; - An Article from November of 2015&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;October 31, 2015&lt;/span&gt; - Boo!&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;First let me show you the completed Liquid code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           {% unless forloop.first %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endunless %}
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ currentDate }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
           {% assign myDate = currentDate %}
       {% endif %}
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ post.date | date: &quot;%B %-d, %Y&quot; }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - {{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       {% if forloop.last %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endif %}
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s the HTML that the code outputs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;March 3, 2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - A Blog Post from March&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;February 26, 2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - Here&#39;s the Title of the Blog Post&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;February 15, 2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - Another Spectacular Article from 2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;January 9, 2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - The First Blog Post of the Year&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;December 25, 2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - Merry Christmas!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;November 10, 2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - An Article from November of 2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;October 31, 2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - Boo!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s recreate the Liquid code line by line. I’ll explain each piece as I add it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}

   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, this &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop surrounds the whole thing. This is saying to loop through every &lt;em&gt;post&lt;/em&gt; in the &lt;em&gt;site&lt;/em&gt; object (i.e. every blog post on our site) and execute the subsequent logic for each post it finds.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}

   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this new line, the &lt;code class=&quot;highlighter-rouge&quot;&gt;assign&lt;/code&gt; command declares a new variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;currentDate&lt;/code&gt; (a name we made up) and sets its value to the date of the post. We apply a filter using the pipe (“|”) character to show only the year, specified with “%Y”. So for example, if the post’s date is 2016-02-10, &lt;code class=&quot;highlighter-rouge&quot;&gt;currentDate&lt;/code&gt; will have its value set to “2016”.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           
       {% endif %}
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we’re doing here is using an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement to check if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;currentDate&lt;/code&gt; is not equal to the value of a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;myDate&lt;/code&gt;, &lt;em&gt;which we haven’t declared yet&lt;/em&gt;. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;myDate&lt;/code&gt; hasn’t been declared yet, we know that this statement will evaluate to &lt;em&gt;true&lt;/em&gt; and the code inside will get executed, at least the first time through the loop.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           {% unless forloop.first %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endunless %}
       {% endif %}
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This new line uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;unless&lt;/code&gt; command along with &lt;code class=&quot;highlighter-rouge&quot;&gt;forloop.first&lt;/code&gt; to say: “&lt;em&gt;Unless&lt;/em&gt; this is the &lt;em&gt;first&lt;/em&gt; time through this loop, do the following.” Which is to print out a closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           {% unless forloop.first %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endunless %}
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ currentDate }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       {% endif %}
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These next two lines simply output a pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags containing the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;currentDate&lt;/code&gt; (which we know is the literal year), and an opening &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag. This is probably the most confusing part of this code, since it seems backwards that in the previous step we wrote a &lt;em&gt;closing&lt;/em&gt; tag and now we’re writing an opening one. But that leads us to the final, and most important, part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           {% unless forloop.first %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endunless %}
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ currentDate }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
           {% assign myDate = currentDate %}
       {% endif %}
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We declare a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;myDate&lt;/code&gt; and set its value to that of &lt;code class=&quot;highlighter-rouge&quot;&gt;currentDate&lt;/code&gt;, which, again, is the literal year string (i.e. “2016”). So now both variables are set to that value. So why do we do this? Because it’s how we ensure that the previous three lines of code only get executed if the current post is the first of its respective year. The code inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement outputs the following HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;YEAR&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s the closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; for the preceding year list, the literal year surrounded in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags, and the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag for the following year list, &lt;em&gt;and we only want it to be created once for each year&lt;/em&gt;. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;currentDate&lt;/code&gt; gets changed every time the year of the post changes, we know that the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement will only evaluate to true for the very first item of a given year.&lt;/p&gt;

&lt;p&gt;Just a couple more lines and we’re all done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           {% unless forloop.first %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endunless %}
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ currentDate }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
           {% assign myDate = currentDate %}
       {% endif %}
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ post.date | date: &quot;%B %-d, %Y&quot; }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - {{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we start populating the list with list items. We get the post year similarly to how we got it earlier, only now we filter it to display as “February 26, 2016” using “%B %-d, %Y”. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;post.title&lt;/code&gt; to output the title of the post, and we surround it all in an anchor tag with its &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;post.url&lt;/code&gt;. Pretty simple.&lt;/p&gt;

&lt;p&gt;Here’s the final step:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive-post-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   {% for post in site.posts %}
       {% assign currentDate = post.date | date: &quot;%Y&quot; %}
       {% if currentDate != myDate %}
           {% unless forloop.first %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endunless %}
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ currentDate }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
           {% assign myDate = currentDate %}
       {% endif %}
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ post.date | date: &quot;%B %-d, %Y&quot; }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; - {{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       {% if forloop.last %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;{% endif %}
   {% endfor %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We added another &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement to write the final closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; tag to close out the final year list (all the previous closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/code&gt;s have been taken care of by the earlier &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement). Here our &lt;code class=&quot;highlighter-rouge&quot;&gt;forloop.last&lt;/code&gt; will only evaluate to true on the very last item in the loop, giving us exactly what we need.&lt;/p&gt;

&lt;p&gt;Pretty clever. I wish I had thought of it.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://chris.house/blog/building-a-simple-archive-page-with-jekyll/</link>
        <guid isPermaLink="true">http://chris.house/blog/building-a-simple-archive-page-with-jekyll/</guid>
        
        <category>jekyll</category>
        
        <category>static site generators</category>
        
        
      </item>
    
      <item>
        <title>One Week with Jekyll</title>
        <description>&lt;p&gt;I love WordPress. It’s robust, mature, community-backed, and easy to use. I’ve used it on numerous projects and it always does me good when I need all the bells and whistles of a complete content management system. But where do I go when all I need is a basic, simple, no frills blog? In that case WordPress, or any other popular full-featured CMS, is overkill. The solution: &lt;a href=&quot;http://www.jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;. Or more generally, static site generators. But Jekyll is billed as a “blog-aware static site generator”. It’s also the most popular one, which is why I decided to sit down, learn it, and create a website with it. In fact this very site you’re reading is my maiden voyage Jekyll project. I’ve been tinkering with it for a week now. Here are my thoughts. &lt;!-- excerpt-end --&gt;&lt;/p&gt;

&lt;h3&gt;A Bit About Static Site Generators&lt;/h3&gt;

&lt;p&gt;The first thing to understand about static site generators is that they are precisely that: tools that spit out nothing but static websites. No databases here, just HTML, CSS, JavaScript and resource files. The benefit of this is, primarily, the speed of the final product. The web was initially intended solely for static files, and while it’s come a log way in optimizing for data-driven sites and apps, there’s still nothing speedier for a browser to load than a static .html document. This was my main motivation to try out Jekyll. As nice as WordPress is, every page must be dynamically generated via database calls, which makes it &lt;em&gt;feel&lt;/em&gt; bloated, even sluggish at times.&lt;/p&gt;

&lt;h3&gt;Beauty in Simplicity&lt;/h3&gt;

&lt;p&gt;As speedy as Jekyll is, there’s more to love about it than just performance. There’s a refreshing satisfaction in its simpleness. Everything from initial installation to final post publishing is stripped down, streamlined and utterly intuitive. After installing Jekyll (which is simply a matter of running &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;), the process of getting a site up and running is trivially easy. Just initialize a new site with &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new mysite&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to the directory it just created, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;. That last command does a few really neat things: it spins up a development server that you can immediately start using by browsing to localhost:4000. It also builds a basic stock site that you can use as a reference. And it runs a watch task that automatically updates the site whenever changes are made, similar to something like &lt;code class=&quot;highlighter-rouge&quot;&gt;sass watch&lt;/code&gt;. Pretty cool.&lt;/p&gt;

&lt;p&gt;When I went in and started exploring the directory structure of my site, the first thing that caught my attention was the numerous underscore-prepended directory names, such as &lt;em&gt;_layouts&lt;/em&gt;. These directories are a part of the Jekyll build process and don’t get included directly in the final site. When you run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;), what happens is all the underscore directories get computed as components for building the final site, which is placed in the directory called &lt;em&gt;_site&lt;/em&gt;. &lt;em&gt;_site&lt;/em&gt; is your entire final website. If you wanted to deploy your site to a remote server, the &lt;em&gt;_site&lt;/em&gt; directory is all you’d need.&lt;/p&gt;

&lt;p&gt;Jekyll uses an intuitive template system to piece together sites. Using &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;YAML front matter&lt;/a&gt;, you simply point a page to a particular layout, which are included in the &lt;em&gt;_layouts&lt;/em&gt; directory. Then you can add some logic to your pages via &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt;, a templating language created by Shopify. Site configuration is done within the &lt;em&gt;_config.yml&lt;/em&gt; file, which allows for all sorts of site customization. Then it’s just a matter of styling your site with CSS just like you would any other site. There’s an enormous amount of freedom here.&lt;/p&gt;

&lt;h3&gt;Jekyll as a Blogging Platform&lt;/h3&gt;

&lt;p&gt;It didn’t take me long to appreciate the efficiency of the way Jekyll pieces itself together. But what about blogging? If Jekyll had a weakness, I assumed this would be it. Well, it turns out that’s where Jekyll &lt;em&gt;really&lt;/em&gt; shines. Included in the project structure is a directory called &lt;em&gt;_posts&lt;/em&gt;. This is, not surprisingly, where you put your blog posts. You simply add some YAML to the top of your post to specify the author, date, and other information, and then just write your post, save your file, build your site, and you’re finished. The really cool thing about writing posts is that it’s all done in markdown, which, if you don’t know, is an incredibly easy and time-efficient method for writing text that gets converted into HTML. It couldn’t be simpler.&lt;/p&gt;

&lt;h3&gt;Bad Things About Jekyll&lt;/h3&gt;

&lt;p&gt;I figured I should balance out my gushing about Jekyll with some of its disadvantages. The biggest point that might cause some people to dislike Jekyll is its reliance on the command line. This isn’t a concern for people, like me, who feel at home on the command line, but it could definitely be an issue for some.&lt;/p&gt;

&lt;p&gt;Similarly, Jekyll isn’t the kind of blogging platform that I would feel comfortable shipping off to a client. It’d be hard to imagine training a user on how to format YAML, run the Jekyll commands in the terminal, and write markdown. Not that these things are complicated, just that they’re much better suited for developers who live and breathe this stuff.&lt;/p&gt;

&lt;p&gt;And that’s really the bottom line: Jekyll is, as far as I’m concerned, a blogging platform for developers. This is either a disadvantage or an asset, depending on your point of view.&lt;/p&gt;

&lt;h3&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;I’ve had a blast the past week learning Jekyll. The site you’re on now is a result of my exploration, and I’m pretty happy with the results. I realize that Jekyll isn’t a replacement for the big CMSs, and it doesn’t intend to be. They’re very different tools that serve different purposes. Some projects require a rocket launcher, but other times a bow and arrow is all you need.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://chris.house/blog/one-week-with-jekyll/</link>
        <guid isPermaLink="true">http://chris.house/blog/one-week-with-jekyll/</guid>
        
        <category>jekyll</category>
        
        <category>static site generators</category>
        
        
      </item>
    
  </channel>
</rss>
